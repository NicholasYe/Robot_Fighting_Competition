
#include <math.h>

const int negLF = 4;//左前负极
const int posLF = 5;//左前正极
const int negRF = 6;//右前负极
const int posRF = 7;//右前正极

const int negLB = 8;//左后负极
const int posLB = 9;//左后正极
const int negRB = 10;//右后负极
const int posRB = 11;//右后正极

const int gray1 = A0;//灰度传感器GR1（车左前）
int graynum1;//灰度传感器返回数值
int* level1 = NULL;//存储灰度传感器数值graynum的指针

const int gray2 = A1;//灰度传感器GR2（车右前)
int graynum2;
int* level2 = NULL;

const int gray3 = A14;//灰度传感器GR3（车左后）
int graynum3;
int* level3 = NULL;

const int gray4 = A15;//灰度传感器GR4（车右后）
int graynum4;
int* level4 = NULL;

const int lightGA = 22;//光电传感器GA前上
int lightnumGA;//光电传感器GA返回数值
int* ligGA = NULL;//存储光电传感器数值lightnumGA的指针

const int lightGB = 18;//光电传感器GB左
int lightnumGB;
int* ligGB = NULL;

const int lightGC = 21;//光电传感器GC右
int lightnumGC;
int* ligGC = NULL;

const int lightGD = 33;//光电传感器GD后
int lightnumGD;
int* ligGD = NULL;

// the setup function runs once when you press reset or power the board
void setup()
{
    Serial.begin(9600);//打开接口9600
    Serial.println("Senesor:");

    pinMode(negLF, OUTPUT);//引脚3
    pinMode(posLF, OUTPUT);//引脚4
    pinMode(negRF, OUTPUT);//引脚5
    pinMode(posRF, OUTPUT);//引脚6

    pinMode(negLB, OUTPUT);//引脚9
    pinMode(posLB, OUTPUT);//引脚10
    pinMode(negRB, OUTPUT);//引脚11
    pinMode(posRB, OUTPUT);//引脚12

    pinMode(gray1, INPUT);//灰度传感器GR1
    pinMode(gray2, INPUT);//灰度传感器GR2
    pinMode(gray3, INPUT);//灰度传感器GR3
    pinMode(gray4, INPUT);//灰度传感器GR4

    pinMode(lightGA, INPUT);//光电传感器GA
    digitalWrite(lightGA, LOW);
    pinMode(lightGB, INPUT);//光电传感器GB
    digitalWrite(lightGB, LOW);
    pinMode(lightGC, INPUT);//光电传感器GC
    digitalWrite(lightGC, LOW);
    pinMode(lightGD, INPUT);//光电传感器GD
    digitalWrite(lightGD, LOW);

    pinMode(LED_BUILTIN, OUTPUT);//LED闪烁
}

void loop()
{
    GA();
    GB();
    GC();
    GD();

    Gray_all();

    //if (*ligGD == 0)
    //{
    //    start_temp();
    //}
}

//灰度传感器一起测定
int Gray_all()
{
    int gray_void_num1[201] = { 0 };
    int gray_void_num2[201] = { 0 };
    int gray_void_num3[201] = { 0 };
    int gray_void_num4[201] = { 0 };

    for (int m = 0; m < 201; m++)
    {
        gray_void_num1[m] = analogRead(0);
        gray_void_num2[m] = analogRead(1);
        gray_void_num3[m] = analogRead(14);
        gray_void_num4[m] = analogRead(15);
    }

    graynum1 = quickSort(gray_void_num1, 0, 200);
    graynum2 = quickSort(gray_void_num2, 0, 200);
    graynum3 = quickSort(gray_void_num3, 0, 200);
    graynum4 = quickSort(gray_void_num4, 0, 200);

    level1 = &graynum1;
    level2 = &graynum2;
    level3 = &graynum3;
    level4 = &graynum4;

    //求数组内中位数
    int median1 = *level1;
    int median2 = *level2;
    int median3 = *level3;
    int median4 = *level4;

    // 串口输出函数
     Serial.print(median1);
     Serial.print("\t");
     Serial.print(median2);
     Serial.print("\t");
     Serial.print(median3);
     Serial.print("\t");
     Serial.print(median4);
     Serial.print("\t");
     Serial.println();
}

int start_temp()
{
    //单轮初始化
    back();
    delay(2400);
    rotate_counterclockwise();
    delay(1000);
    forward();
    delay(300);

    while (1)
    {
        return_center();
    }
}


//回归中心函数
int return_center()
{
    Gray_all();
    GA();
    GB();
    GC();
    GD();

    //车子左侧靠中心
    if ((*level1 > *level2) && (*level3 > *level4))
    {
        rotate_counterclockwise();
        delay(640);
        do
        {
            forward();
            Gray_all();
        } while ((*level1 > *level3) && (*level2 > *level4));
        forward();
        delay(5);
    }

    //车子右侧靠中心
    else if ((*level1 < *level2) && (*level3 < *level4))
    {
        rotate_clockwise();
        delay(640);
        do
        {
            forward();
            Gray_all();
        } while ((*level1 > *level3) && (*level2 > *level4));
        forward();
        delay(5);
    }

    //车子面向中心
    else if ((*level1 > *level3) && (*level2 > *level4))
    {
        do
        {
            forward();
            delay(5);
            Gray_all();
        } while ((*level1 > *level3) && (*level2 > *level4));
        forward();
        delay(5);
    }
}


//数学函数

//取中值函数
int quickSortPartition(int s[], int l, int r) {
    //Swap(s[l], s[(l + r) / 2]); //若以中间数为基准，则先将中间的这个数和第一个数交换即可
    int i = l, j = r, x = s[l]; //将最左元素记录到x中
    while (i < j)
    {
        // 从右向左找第一个<x的数
        // 无需考虑下标越界
        while (i < j && s[j] >= x)
            j--;
        if (i < j)
            s[i++] = s[j]; //直接替换掉最左元素（已在x中存有备份）

        // 从左向右找第一个>x的数
        while (i < j && s[i] <= x)
            i++;
        if (i < j)
            //替换掉最右元素(已在最左元素中有备份）
            //最左元素一定被覆盖过，若没有，则表明右侧所有元素都>x，那么算法将终止
            s[j--] = s[i];
    }
    s[i] = x;  //i的位置放了x，所以其左侧都小于x，右侧y都大于x
    return i;
}

int quickSort(int s[], int l, int r)
{
    //数组左界<右界才有意义，否则说明都已排好，直接返回即可
    if (l >= r) {
        return s[100];
    }

    // 划分，返回基准点位置
    int i = quickSortPartition(s, l, r);

    // 递归处理左右两部分，i处为分界点，不用管i了
    quickSort(s, l, i - 1);
    quickSort(s, i + 1, r);

    return s[100];
}

//需调试小车移动函数

//前进函数
int forward()
{
    digitalWrite(posLF, HIGH);//左前向前
    digitalWrite(negLF, LOW);
    digitalWrite(posRF, LOW);//右前向前
    digitalWrite(negRF, HIGH);
    digitalWrite(posLB, LOW);//左后向前
    digitalWrite(negLB, HIGH);
    digitalWrite(posRB, HIGH);//右后向前
    digitalWrite(negRB, LOW);
}

//后退函数
int back()
{
    digitalWrite(posLF, LOW);//左前向前
    digitalWrite(negLF, HIGH);
    digitalWrite(posRF, HIGH);//右前向前
    digitalWrite(negRF, LOW);
    digitalWrite(posLB, HIGH);//左后向前
    digitalWrite(negLB, LOW);
    digitalWrite(posRB, LOW);//右后向前
    digitalWrite(negRB, HIGH);
}

//停止函数
int brake()
{
    digitalWrite(posLF, LOW);//左前停
    digitalWrite(negLF, LOW);
    digitalWrite(posRF, LOW);//右前停
    digitalWrite(negRF, LOW);
    digitalWrite(posLB, LOW);//左后停
    digitalWrite(negLB, LOW);
    digitalWrite(posRB, LOW);//右后停
    digitalWrite(negRB, LOW);
}

//顺时针旋转
int rotate_clockwise()
{
    digitalWrite(posLF, HIGH);//左前向前
    digitalWrite(negLF, LOW);
    digitalWrite(posRF, HIGH);//右前向后
    digitalWrite(negRF, LOW);
    digitalWrite(posLB, LOW);//左后向前
    digitalWrite(negLB, HIGH);
    digitalWrite(posRB, LOW);//右后向后
    digitalWrite(negRB, HIGH);
}

//逆时针旋转
int rotate_counterclockwise()
{
    digitalWrite(posLF, LOW);//左前向
    digitalWrite(negLF, HIGH);
    digitalWrite(posRF, LOW);//右前向
    digitalWrite(negRF, HIGH);
    digitalWrite(posLB, HIGH);//左后向
    digitalWrite(negLB, LOW);
    digitalWrite(posRB, HIGH);//右后向
    digitalWrite(negRB, LOW);
}

//左转
int left()
{
    digitalWrite(posLF, LOW);//左前向
    digitalWrite(negLF, LOW);
    digitalWrite(posRF, LOW);//右前向
    digitalWrite(negRF, HIGH);
    digitalWrite(posLB, LOW);//左后向
    digitalWrite(negLB, LOW);
    digitalWrite(posRB, HIGH);//右后向
    digitalWrite(negRB, LOW);
}

//右转
int right()
{
    digitalWrite(posLF, HIGH);//左前向
    digitalWrite(negLF, LOW);
    digitalWrite(posRF, LOW);//右前向
    digitalWrite(negRF, LOW);
    digitalWrite(posLB, LOW);//左后向
    digitalWrite(negLB, HIGH);
    digitalWrite(posRB, LOW);//右后向
    digitalWrite(negRB, LOW);
}

//光电传感器GA
int GA()
{
    lightnumGA = digitalRead(lightGA);
    ligGA = &lightnumGA;
}

//光电传感器GB
int GB()
{
    lightnumGB = digitalRead(lightGB);
    ligGB = &lightnumGB;
}

//光电传感器GC
int GC()
{
    lightnumGC = digitalRead(lightGC);
    ligGC = &lightnumGC;
}

//光电传感器GD
int GD()
{
    lightnumGD = digitalRead(lightGD);
    ligGD = &lightnumGD;
}
